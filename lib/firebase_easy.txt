A step-by-step guide for using Firestore in your Flutter app, along with models and a database helper. 
Here's an approach that you could use:

1. Create a new Flutter project:

    Open your terminal and run flutter create my_app_name.
    Alternatively, you can use the "New Project" wizard in your IDE of choice.

2. Add the Firestore and Flutter packages to your pubspec.yaml file:

    In the dependencies section, add firebase_core: ^2.10.0, cloud_firestore: ^4.5.3
    and other necessary dependencies as needed

3. Configure Firebase in your Flutter project:

    Go to the Firebase Console and create a new project (if you haven't already).

    Click "Add app" and follow the instructions to add a new Android or iOS app.

    Download the google-services.json (Android) or GoogleService-Info.plist (iOS) file and add 
    it to your Flutter project's android/app or ios directory, respectively.

4. Add the Firebase initialization code to your app:

    import 'package:firebase_core/firebase_core.dart';

    Future<void> main() async {
    // Initialize Firebase
    WidgetsFlutterBinding.ensureInitialized();
    await Firebase.initializeApp();

    // Run your app
    runApp(MyApp());
    }

5. Define a model based on your app:

    Eg: A Todo Model for a collection Of Todos

    Create a new Dart file called todo_model.dart.

    Define a Todo class with the following properties:

    class Todo {
        String id;
        String name;
        DateTime dateTime;

        Todo({
            this.id,
            this.name,
            this.dateTime,
        });
        }

    This model defines a Todo object with an id, name, and dateTime property.

6. Define a DatabaseHelper class:

    Create a new Dart file called database_helper.dart.

    Define a DatabaseHelper class with the following methods:

    import 'package:cloud_firestore/cloud_firestore.dart';
    import 'package:my_app_name/todo_model.dart';

    class DatabaseHelper {
    final CollectionReference todosCollection = FirebaseFirestore.instance.collection('todos');

    Future<void> addTodo(Todo todo) async {
        await todosCollection.add({
        'name': todo.name,
        'dateTime': todo.dateTime,
        });
    }

    Future<void> updateTodo(Todo todo) async {
        await todosCollection.doc(todo.id).update({
        'name': todo.name,
        'dateTime': todo.dateTime,
        });
    }

    Future<void> deleteTodo(String id) async {
        await todosCollection.doc(id).delete();
    }

    Stream<List<Todo>> getTodos() {
        return todosCollection.snapshots().map((snapshot) {
        return snapshot.docs.map((doc) {
            return Todo(
            id: doc.id,
            name: doc['name'],
            dateTime: doc['dateTime'].toDate(),
            );
        }).toList();
        });
    }
    }


    This class defines a DatabaseHelper object with methods for adding, updating, and deleting Todo objects 
    in Firestore, as well as a method for getting a stream of all Todo objects.

    The getTodos() method returns a Stream that emits a List of Todo objects whenever the Firestore data 
    changes.

    Note that we're using the toDate() method to convert the dateTime field from a Firestore Timestamp 
    to a Dart DateTime.

7. Use the DatabaseHelper class in your app:

    In your app, import the database_helper.dart file:

        import 'package:flutter/material.dart';
        import 'package:my_app_name/database_helper.dart';
        import 'package:my_app_name/todo_model.dart';
        
        void main() {
        runApp(MyApp());
        }
        
        class MyApp extends StatelessWidget {
        final DatabaseHelper databaseHelper = DatabaseHelper();
        
        @override
        Widget build(BuildContext context) {
            return MaterialApp(
            title: 'My App Name',
            home: Scaffold(
                appBar: AppBar(
                title: Text('My App Name'),
                ),
                body: Center(
                child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                    ElevatedButton(
                        child: Text('Add Todo'),
                        onPressed: () async {
                        Todo todo = Todo(
                            name: 'My Todo',
                            dateTime: DateTime.now(),
                        );
                        await databaseHelper.addTodo(todo);
                        },
                    ),
                    StreamBuilder<List<Todo>>(
                        stream: databaseHelper.getTodos(),
                        builder: (context, snapshot) {
                        if (snapshot.hasData) {
                            List<Todo> todos = snapshot.data;
                            return Column(
                            children: todos.map((todo) {
                                return Text('${todo.name} - ${todo.dateTime}');
                            }).toList(),
                            );
                        } else {
                            return CircularProgressIndicator();
                        }
                        },
                    ),
                    ],
                ),
                ),
            ),
            );
        }
    }

    
